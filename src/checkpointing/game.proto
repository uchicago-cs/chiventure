syntax = "proto2";

//In Game-state implementation, attribute is a union. Proto doesn't support unions, so we use optional instead

message Actiontype {
    optional string c_name = 1;
    optional string kind = 2;
}

message Gameaction {
    optional string action_name = 1;
    optional Actiontype action_type = 2;
}

message Attributevalue {
    optional double double_val = 1;
    optional int32 char_val = 2; //NO CHAR TYPE SUPPORTED IN .PROTO, SO USING INT INSTEAD
    optional bool bool_val = 3;
    optional string str_val = 4;
    optional int32 int_val = 5;
    optional Gameaction act_val = 6;
}

message Attribute {
    //Actual string describing attribute (e.g: locked for door)
    //attribute_key may change to attribute_name later
    required string attribute_key = 1; 
    required string attribute_tag = 2; //Tag of which type attribute value will be
    required Attributevalue attribute_value = 3; //Value of attribute (submessage) 
}

message Item {
    required string item_id = 1;
    optional string short_desc = 2;
    optional string long_desc = 3;
    // optional bool can_take // reserved for future expansion
    repeated Attribute attributes = 4; //Array of attributes (submessage)
    optional int32 attributes_len = 5; //Length of array (helpful for loading)
}

// message Condition {
    // optional string item_id = 1; //Assuming item is already stored in a room or player, only ID is needed
    //May change when Game State update their expected_attribute
    // optional Attribute expected_attribute = 2; 
    // Contacted with Game state, likely to be their final format
// }

// message Path {
    // optional string direction = 1; 
    // optional string dest = 2; //Room ID of destination
    // repeated Condition conditions = 3; //Array of conditions (submessage)
    // optional int32 conditions_len = 4;
// }

message Room {
    required string room_id = 1;
    optional string short_desc = 2;
    optional string long_desc = 3;
    repeated Item items = 4; //Array of all items in room
    optional int32 items_len = 5;
    // Comment out path since we no longer store paths
    // repeated Path paths = 6; //Array of all paths (submessage) 
    // optional int32 paths_len = 7;
}

message Player {
    required string player_id = 1;
    required int32 level = 2; //next 3 req because GS loads in initial values  
    required int32 health = 3;
    required int32 xp = 4;
    repeated Item inventory = 5; //Array of all object ids in inventory
    optional int32 inventory_len = 6;
}   

message Game {
    repeated Player all_players = 1; //Array of all players (submessage)
    required int32 players_len = 2;
    repeated Room all_rooms = 3; //Array of all rooms (submessage)
    required int32 rooms_len = 4;
    optional string curr_room = 5; //ID of current room (different from struct pointer of game_state)
    optional string curr_player = 6; //ID of player (different from struct pointer of game_state)
    // optional string start_desc = 7;
}

message Logvalueunion {
    optional int32 int_val = 1;
    optional string str_val = 2;
    optional double double_val = 3;
    optional int32 char_val = 4; //NO CHAR TYPE SUPPORTED IN .PROTO, SO USING INT INSTEAD
    optional bool bool_val = 5;
}

message Logvalue {
    optional string tag = 1;
    optional Logvalueunion value = 2;
}

message Log {
    optional string level = 1; // To specify whether it's in game, player, etc
    optional string level_id = 2; // Id of player, room, etc
    optional string member = 3; // Indicate which member, such as player's "xp"
    optional Logvalue old_value = 4;
    optional Logvalue new_value = 5;
}

message Logs {
    optional int32 logs_len = 1;
    repeated Log logs = 2;
}

